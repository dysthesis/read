#!/usr/bin/env sh
set -eu

XDG_CACHE_HOME=${XDG_CACHE_HOME:-"$HOME/.local/share"}
XDG_CONFIG_HOME=${XDG_CACHE_HOME:-"$HOME/.config"}
CACHE_FILE=${CACHE_FILE:-"$XDG_CACHE_HOME/read/contents.json"}

SUBCOMMAND=${1:-"show"}
URLS=${2:-$XDG_CONFIG_HOME/read/feeds} # file containing feed URLs, one per line
JOBS=${3:-64}                          # maximum concurrent feed workers

update_feeds() {
  tmp=$(mktemp -d) || exit 1
  trap 'rm -rf "$tmp" "$sem"' EXIT INT HUP TERM

  sem=$(mktemp -u)
  mkfifo "$sem"
  exec 3<>"$sem" 4>&3
  rm "$sem" # remove pathname; FIFO stays open
  i=0
  while [ "$i" -lt "$JOBS" ]; do # preload N tokens
    printf '\n' >&4
    i=$((i + 1))
  done

  log() { printf '%s\n' "$*" >&2; }

  i=0
  while IFS= read -r feed || [ -n "$feed" ]; do
    IFS= read -r _ <&3 # wait for a free token
    i=$((i + 1))

    {
      log "[#${i}] Fetching $feed …"

      if ! data=$(curl -sL --retry 3 --max-time 20 "$feed"); then
        log "[#${i}] curl failed ($?) – feed ignored"
        printf '[]' >"$tmp/$i.json"
        printf '\n' >&4 # return token
        exit 0
      fi

      json=$(printf '%s' "$data" | r 2>"$tmp/r-${i}.err")
      r_status=$?
      if [ "$r_status" -ne 0 ]; then
        log "[#${i}] r exited $r_status – feed ignored"
        printf '[]' >"$tmp/$i.json"
        printf '\n' >&4
        exit 0
      fi

      printf '%s\n' "$json" |
        jq -c '.[]' | # stream objects, one per line
        while IFS= read -r art; do
          url=$(printf '%s\n' "$art" | jq -r '.url // empty')
          [ -z "$url" ] && {
            printf '%s\n' "$art"
            continue
          }

          body=$(clean --markdown "$url" 2>/dev/null | jq -Rs .)
          printf '%s\n' "$art" |
            jq --argjson c "$body" '.content = $c' # overwrite unconditionally
        done |
        jq -s '.' >"$tmp/$i.json" # re-assemble array

      printf '\n' >&4 # return token
    } &
  done <"$URLS"

  wait

  log '[+] Merging …'
  find "$tmp" -name '*.json' -print0 |
    xargs -0 cat | jq -s 'add' >"$CACHE_FILE"

  log "[+] Written merged array to $CACHE_FILE"
}

case $SUBCOMMAND in
"update")
  update_feeds
  ;;
*)
  echo "Invalid subcommand!"
  ;;
esac
